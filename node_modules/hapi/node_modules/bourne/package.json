{
  "_args": [
    [
      "bourne@https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
      "/home/aman/Documents/splint_0/node_modules/hapi"
    ]
  ],
  "_from": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
  "_id": "bourne@1.0.0",
  "_inCache": true,
  "_location": "/hapi/bourne",
  "_phantomChildren": {},
  "_requested": {
    "name": "bourne",
    "raw": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/hapi/statehood",
    "/hapi/subtext"
  ],
  "_resolved": "https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
  "_shasum": "3d66dc0f7af2f1edf316178f0d3f50fe04f3169d",
  "_shrinkwrap": null,
  "_spec": "bourne@https://registry.npmjs.org/bourne/-/bourne-1.0.0.tgz",
  "_where": "/home/aman/Documents/splint_0/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/bourne/issues"
  },
  "dependencies": {},
  "description": "JSON parse with prototype poisoning protection",
  "devDependencies": {
    "code": "5.x.x",
    "lab": "18.x.x"
  },
  "homepage": "https://github.com/hapijs/bourne#readme",
  "keywords": [
    "JSON",
    "parse",
    "prototype",
    "safe"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "bourne",
  "optionalDependencies": {},
  "readme": "# Bourne. JSON Bourne.\r\n\r\n`JSON.parse()` drop-in replacement with prototype poisoning protection\r\n\r\n## Introduction\r\n\r\nConsider this:\r\n\r\n```\r\n> const a = '{\"__proto__\":{ \"b\":5}}';\r\n'{\"__proto__\":{ \"b\":5}}'\r\n\r\n> const b = JSON.parse(a);\r\n{ __proto__: { b: 5 } }\r\n\r\n> b.b;\r\nundefined\r\n\r\n> const c = Object.assign({}, b);\r\n{}\r\n\r\n> c.b\r\n5\r\n```\r\n\r\nThe problem is that `JSON.parse()` retains the `__proto__` property as a plain object key. By\r\nitself, this is not a security issue. However, as soon as that object is assigned to another or\r\niterated on and values copied, the `__proto__` property leaks and becomes the object's prototype.\r\n\r\n## API\r\n\r\n### `Bourne.parse(text, [reviver], [options])`\r\n\r\nParses a given JSON-formatted text into an object where:\r\n- `text` - the JSON text string.\r\n- `reviver` - the `JSON.parse()` optional `reviver` argument.\r\n- `options` - optional configuration object where:\r\n    - `protoAction` - optional string with one of:\r\n        - `'error'` - throw a `SyntaxError` when a `__proto__` key is found. This is the default value.\r\n        - `'remove'` - deletes any `__proto__` keys from the result object.\r\n        - `'ignore'` - skips all validation (same as calling `JSON.parse()` directly).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/bourne.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "1.0.0"
}
